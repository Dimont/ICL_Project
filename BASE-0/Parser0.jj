options {
  
  STATIC = false;
}
PARSER_BEGIN(Parser)

import java.util.ArrayList;
import exceptions.*;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  /*public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

	Environment env = new Environment();
	
    while (true) {
	    try {
	      exp = parser.Start();
	      System.out.println("Syntax is okay: " + exp.eval(env) );
	    }
	    catch (Exception e) {
	      System.out.println ("Syntax Error!" + e.getMessage());
	      parser.ReInit(System.in);
	    }
    }
  }*/

}

PARSER_END(Parser)

SKIP :
{
  " "
  |
  "\t"
  |
  "\r" 
}

TOKEN :
{
   < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < DIGITS : (["0"-"9"])+ >  
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EOL: "\n" >
  | 
  < ASSOC : "=" >
  |
  < DEF :"def" >
  |
  < IN:"in" >
  |
  < END:"end" >
  |
  < TRUE:"true" >
  |
  < FALSE:"false" >
  |
  < AND:"&&" >
  |
  < OR:"||" >
  |
  < VAR:"var" >
  |
  < ASSIGN:":=" >
  |
  < EQ:"==" >
 
}

ASTNode Start():{
   ASTNode t;
}
{
   t = TopExp() <EOL>
   { return t; }
}

ASTNode TopExp():
{	ASTNode t; }
{  t=AssignExp()
	{ return t; }
}

ASTNode AssignExp():
{ ASTNode t1,t2; }
{
  t1=BoolExp()
  ( < ASSIGN > t2 = BoolExp()
  	{ t1 = new ASTAssign(t1,t2); }
  )*
	{  return t1; } 
}

ASTNode BoolExp():
{  ASTNode t1, t2; }
{  t1 = DisjExp()
  ( < AND > t2 = DisjExp()
	{  t1 = new ASTAnd(t1,t2);  }
  )*
  {  return t1;  }
}

ASTNode DisjExp():
{  ASTNode t1, t2; }
{  t1 = EqExp()
  ( < OR > t2 = EqExp()
	  {  t1 = new ASTOr(t1,t2);  }
  )*
  {  return t1; }
}

ASTNode EqExp():
{  ASTNode t1, t2; }
{  t1 = Exp()
  [ < EQ > t2 = Exp()
	{  t1 = new ASTEq(t1,t2);  }
  ]
  {  return t1;  }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :{
  Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> )
     t2 = Fact() 
 		 { if (op.kind == TIMES) 
                         t1 = new ASTMult(t1,t2);
                   else  t1 = new ASTDiv(t1,t2);
                 }  
		)*
     { return t1; } 
}

ASTNode Fact() :
{ Token n; 
  ASTNode t1;
  ASTNode t2=null;
}
{
   n=<DIGITS> {  t1 = new ASTNum(Integer.parseInt(n.image)); return t1;}
   |
   <LPAR> t1=TopExp() <RPAR> { return t1; }
   |
   < VAR ><LPAR > t1 = TopExp() <RPAR > { return new ASTVar(t1); }
   |
   < MINUS > t1=Fact() { return new ASTNeg(t1); }
   |
   < PLUS > t1=Fact() { return t1; }
   |
   n=<TRUE> { t1 = new ASTBoolean(true); return t1; } 
   | 
   n=<FALSE> { t1 = new ASTBoolean(false); return t1; }
   |
   n = <Id> { return new ASTId(n.image); }
   |
   t1 = Def() { return t1; }
   |
   < TIMES > t1 = Fact() { return new ASTDeRef(t1); }
}

ASTNode Def():{
	Token n;
	ASTNode t1, t2;
	ArrayList<Binding> binds = new ArrayList<Binding>(); }
{
  <DEF>
	  ( n = <Id> <ASSOC> t1 = TopExp()
	  { binds.add(new Binding(n.image, t1)); }
	  )+
  <IN> t2 = TopExp() <END> {
	    return new ASTDef(binds, t2);
	  }
}
