options {
  LOOKAHEAD=2;
}
PARSER_BEGIN(Parser)


/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
	    try {
	      exp = parser.Start();
	      System.out.println("Syntax is okay: " + exp.eval() );
	    }
	    catch (Exception e) {
	      System.out.println ("Syntax Error!" + e.getMessage());
	      parser.ReInit(System.in);
	    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
}
/*| "\t"
| "\r"
| < "//" (~ ["\n","\r"])* ("\n"|"\r") >*/

TOKEN :
{
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "."<DIGITS> >  
  |
  < DIGITS : (["0"-"9"])+ >  
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EOL: "\n" | "\r" | "\r\n" >
}

ASTNode Start():{
   ASTNode t;
}
{
   t = Exp() <EOL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 { if (op.kind == TIMES) 
                         t1 = new ASTMult(t1,t2);
                   else  t1 = new ASTDiv(t1,t2);
                 }  
		)?
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t;}
{
   ( n=<NUMBER> { t = new ASTNum(Double.parseDouble(n.image)); }
   | <LPAR> t=Exp() <RPAR> )
   { return t; }
   | < MINUS > t=Fact() { return -t; }
}





















